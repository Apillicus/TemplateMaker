To implement the requested functionality, we will need to create several JavaScript modules, each responsible for a specific feature (zooming, panning, grid drawing, shape drawing, pattern application, etc.). We will also need to create event handlers to manage user interactions, extend the canvas initialization to handle window resizes, build out the exporting functionality, add actual test cases in Jest test suites, and add more advanced error handling and UI feedback.


src/index.js
```javascript
import { initCanvas } from './canvas.js';
import { handleUserInteractions } from './eventHandlers.js';

window.onload = function() {
    initCanvas();
    handleUserInteractions();
}
```

This file imports the necessary modules and initializes the canvas and event handlers when the window loads.

src/canvas.js
```javascript
export function initCanvas() {
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });

    return ctx;
}
```

This file exports a function that initializes the canvas and sets up an event listener to handle window resizes.

src/eventHandlers.js
```javascript
import { zoom, pan } from './zoomAndPan.js';
import { drawGrid, drawShape, applyPattern } from './drawing.js';

export function handleUserInteractions() {
    const canvas = document.getElementById('canvas');

    canvas.addEventListener('wheel', zoom);
    canvas.addEventListener('mousedown', pan);
    canvas.addEventListener('mousemove', drawShape);
    canvas.addEventListener('mouseup', applyPattern);
}
```

This file imports the necessary functions from other modules and sets up event listeners for user interactions.

src/zoomAndPan.js
```javascript
export function zoom(event) {
    // Implement zoom functionality
}

export function pan(event) {
    // Implement pan functionality
}
```

This file exports functions for zooming and panning.

src/drawing.js
```javascript
export function drawGrid(ctx) {
    // Implement grid drawing functionality
}

export function drawShape(ctx, event) {
    // Implement shape drawing functionality
}

export function applyPattern(ctx, pattern) {
    // Implement pattern application functionality
}
```

This file exports functions for drawing a grid, shapes, and applying patterns.

src/export.js
```javascript
export function exportDesign(ctx) {
    // Implement design exporting functionality
}
```

This file exports a function for exporting the design.

__tests__/canvas.test.js
```javascript
import { initCanvas } from '../src/canvas.js';

describe('Canvas initialization', () => {
    // Add test cases
});
```

__tests__/eventHandlers.test.js
```javascript
import { handleUserInteractions } from '../src/eventHandlers.js';

describe('Event handlers', () => {
    // Add test cases
});
```

__tests__/zoomAndPan.test.js
```javascript
import { zoom, pan } from '../src/zoomAndPan.js';

describe('Zooming and panning', () => {
    // Add test cases
});
```

__tests__/drawing.test.js
```javascript
import { drawGrid, drawShape, applyPattern } from '../src/drawing.js';

describe('Drawing', () => {
    // Add test cases
});
```

__tests__/export.test.js
```javascript
import { exportDesign } from '../src/export.js';

describe('Exporting', () => {
    // Add test cases
});
```

Each Jest test suite imports the necessary functions from the corresponding module and defines a describe block for the test cases.

For the package manager dependency definition file:

package.json
```json
{
  "name": "canvas-designer",
  "version": "1.0.0",
  "description": "A canvas-based design tool",
  "main": "src/index.js",
  "scripts": {
    "test": "jest"
  },
  "dependencies": {},
  "devDependencies": {
    "jest": "^26.6.3"
  }
}
```
